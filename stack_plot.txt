

from ipywidgets import Layout
from matplotlib import cm
import numpy as np
import matplotlib
import matplotlib.pyplot as plt


#fig = px.colors.qualitative.swatches()
#fig.show()

plotly_colors = {'Plotly':px.colors.qualitative.Plotly,
                 'D3':px.colors.qualitative.D3,
                 'G10':px.colors.qualitative.G10,
                 'T10':px.colors.qualitative.T10,
                 'Alphabet':px.colors.qualitative.Alphabet,
                 'Dark24':px.colors.qualitative.Dark24,
                 'Light24':px.colors.qualitative.Light24,
                 'Set1':px.colors.qualitative.Set1,
                 'Pastel1':px.colors.qualitative.Pastel1,
                 'Dark2':px.colors.qualitative.Dark2,
                 'Set2':px.colors.qualitative.Set2,
                 'Pastel2':px.colors.qualitative.Pastel2,
                 'Set3':px.colors.qualitative.Set3,
                 'Antique':px.colors.qualitative.Antique,
                 'Bold':px.colors.qualitative.Bold,
                 'Pastel':px.colors.qualitative.Pastel,
                 'Prism':px.colors.qualitative.Prism,
                 'Safe':px.colors.qualitative.Safe,
                 'Vivid':px.colors.qualitative.Vivid,
                 'tab20':[matplotlib.colors.to_hex(i) for i in cm.tab20(np.arange(20)/20.)],
                 'tab20b':[matplotlib.colors.to_hex(i) for i in cm.tab20b(np.arange(20)/20.)],
                 'tab20c':[matplotlib.colors.to_hex(i) for i in cm.tab20c(np.arange(20)/20.)]}


@interact
def stacked_plot(ejex = widgets.Dropdown(options=list(lineage_corr.select_dtypes('object').columns),
                                        value='Genus',description='X axis:',disabled=False,
                                        layout=Layout(width='25%', height='25px')),
                 ejey = widgets.Dropdown(options=list(lineage_corr.select_dtypes('object').columns),
                                        value='Species',description='Y axis:',disabled=False,
                                        layout=Layout(width='25%', height='25px')),
                 colors = widgets.Dropdown(options=list(plotly_colors.keys()),value='Alphabet',
                                           description='Colors:',disabled=False,
                        layout=Layout(width='25%', height='25px')),
                 salvar = widgets.ToggleButton(value=False,description='Save html',disabled=False,button_style='',
                                tooltip='Description')):
    lineage_corr = Class_Tax
    columna = ejex
    columna2 = ejey
    lineage_corr = lineage_corr.sort_values(by =columna2,ascending=True).reset_index(drop=True)
    columnas = lineage_corr[columna2].drop_duplicates().tolist()
    columnas.insert(0, columna)
    ###
    datos = []
    datos2 = []
    for i in lineage_corr[columna].drop_duplicates():
        #print('**********', i)
        df = lineage_corr[lineage_corr[columna] == i]
        dat = []
        for x in lineage_corr[columna2].drop_duplicates():
            if len(df[df[columna2].str.contains(x) == True]) > 0:
                #print(i, x, df[df.Year.str.contains(x) == True][columna].count())
                dat.append(df[df[columna2].str.contains(x) == True][columna].count())
                datos2.append([i, x, df[df[columna2].str.contains(x) == True][columna].count()])
            else:
                #print(i, x, 0)
                dat.append(0)
                datos2.append([i, x, 0])
    
    DF = DataFrame(datos2, columns = [columna, columna2, 'Val2'])
    vals = []
    for i in DF[columna].drop_duplicates():
        df2 = DF[DF[columna] == i]
        for z in list((np.array(df2.Val2.tolist()) / sum(df2.Val2.tolist())) * 100):
            vals.append(z)
    DF['Val'] = vals
    DF = DF.sort_values(by =columna,ascending=True).reset_index(drop=True)
    fig = px.bar(DF, x=columna, y="Val", color=columna2, width=900, height=500,
                color_discrete_sequence = plotly_colors[colors])
    fig.update_layout(xaxis_type='category')
    fig.update_yaxes(title_text='<b>Relative abundance (%)</b>')
    #fig.update_xaxes(title_text='<b>Number of organisms</b>')
    fig.layout.plot_bgcolor = 'white'
    fig.show()
    if salvar == True:
        plotly.offline.plot(fig, filename = archivo_salida.split('.')[0]+'_Stacked_'+datetime.datetime.now().strftime('%d.%B.%Y_%I-%M%p')+'.html', auto_open=False)
        fig.to_json()
        fig.write_json()

### Circle

Class_Tax['num'] = 1
colores = ['BrBG','PiYG','PRGn','PuOr','RdBu','RdGy','RdYlBu','RdYlGn','Spectral','Blues','BuGn','BuPu',
           'GnBu','Greens','Greys','Oranges','OrRd','PuBu','PuBuGn','PuRd','Purples','RdPu','Reds',
           'YlGn','YlGnBu','YlOrBr','YlOrRd']
colores.sort()# Funcion para obtener un diccionario e ingresar a jerarquias de un dataframe
def get_levels(df = DataFrame([])):
    levels = {}
    for i in range(0, len(df.columns)):
        if list(range(0, i)) != []:
            levels[str(i)] = list(range(0, i)) + [len(df.columns)-1]
    return levels
niveles = get_levels(df = Class_Tax)


@interact
def scatter_plot(Level = widgets.SelectionSlider(options=['1', '2', '3', '4', '5', '6', '7', '8'],
                                                 value='7',description='Level',disabled=False,
                              continuous_update=False,orientation='horizontal',readout=True),
                 barescala = widgets.SelectionSlider(options=range(1,51),
                                                 value=5,description='Bar scale',disabled=False,
                              continuous_update=False,orientation='horizontal',readout=True),
                 colors = widgets.Dropdown(options=colores,value='RdYlBu',description='Colors:',disabled=False,
                        layout=Layout(width='25%', height='25px')),
                 salvar = widgets.ToggleButton(value=False,description='Save html',disabled=False,button_style='',
                                tooltip='Description')):
    nivel = niveles[Level]
    df = Class_Tax.iloc[:,nivel]
    print('\33[1m\33[7mLineage\33[0m: \33[1m'+' | '.join(df.columns.tolist()[0:len(nivel)-1]))
    fig = px.sunburst(Class_Tax.iloc[:,niveles[Level]], path=Class_Tax.iloc[:,niveles[Level]].columns.tolist()[0:len(niveles[Level])-1],
                      #title="Taxonomy Classification",
                      color='num', color_continuous_scale = colors, values='num')
    fig.update_layout(#uniformtext=dict(minsize=50),
        margin = dict(t=2, l=0, r=0, b=0),
        coloraxis_colorbar=dict(
    title="Abundance",
    thicknessmode="pixels",
    thickness=30,
    lenmode="pixels",
    #len=400,
    yanchor="bottom",
    xanchor="center",
    y=0,
    x=0.85,
    ticks="outside",
    dtick=barescala))
    fig.update_layout()
    fig.show()
    if salvar == True:
        plotly.offline.plot(fig, filename = '_Tax_Class_.html', auto_open=False)
